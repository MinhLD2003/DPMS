@startuml

abstract class BaseService<T> {
    #Repository : IRepository<T>
    #_unitOfWork : IUnitOfWork
}

abstract class BaseRepository<T> {
    #_context : DPMSContext
    #_dbSet : DbSet<T>
}

interface IRepository<T> {
    +Task DeleteAsync(object id)
}

BaseRepository --|> IRepository

BaseService --|> IService
BaseService --> IRepository : uses IRepository<T>

class PurposeController {
    -_purposeService : IPurposeService

    +Task<IActionResult> DeletePurpose(Guid id)
}

class PurposeService {
}

interface IPurposeService {
}

interface IService<T> {
    +Task<bool> DeleteAsync(object id)
}

IPurposeService --|> IService
PurposeService --|> IPurposeService
PurposeService --|> BaseService : inherits default \nimplementations from
PurposeController --> IPurposeService : uses DeleteAsync<T> to delete purpose

@enduml