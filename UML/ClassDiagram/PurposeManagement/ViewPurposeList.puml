@startuml

abstract class BaseService<T> {
    #Repository : IRepository<T>
    #_unitOfWork : IUnitOfWork
}

abstract class BaseRepository<T> {
    #_context : DPMSContext
    #_dbSet : DbSet<T>
}

interface IRepository<T> {
    +Task<PagedResponse<T>> GetPagedAsync(QueryParams queryParams , params Expression<Func<T, object>>[]? includes)
}

BaseRepository --|> IRepository

BaseService --|> IService
BaseService --> IRepository : uses IRepository<T>

class PurposeController {
    -_purposeService : IPurposeService

    +Task<IActionResult> GetPurposes(QueryParams queryParams)
}

class QueryParams {
    +PageNumber : int
    +PageSize : int
    +SortBy : string
    +SortDirection : string
    +Filters : Dictionary<string, string>
}

class PurposeService {
}

interface IPurposeService {
}

interface IService<T> {
    +Task<PagedResponse<T>> GetPagedAsync(QueryParams queryParams , params Expression<Func<T, object>>[]? includes)
}

IPurposeService --|> IService
PurposeService --|> IPurposeService
PurposeService --|> BaseService : inherits default \nimplementations from
PurposeController --> IPurposeService : uses GetPagedAsync<T>
PurposeController --> QueryParams : receives from client

@enduml