@startuml

class DPIAController {
    -_dpiaService : IDPIAService

    +UpdateResponsibilityMembers(Guid dpiaId, Guid responsibilityId, DPIAResponsibilityMemberUpdateVM vm) : Task<ActionResult>
}

class DPIAService {
    +UpdateResponsibilityMembersAsync(Guid dpiaId, Guid responsibilityId, List<Guid> userIds, Guid? picId) : Task
}

class DPIAResponsibilityMemberUpdateVM {
    +UserIds : List<Guid>
    +Pic : Guid?
}

class DPIARepository {
    +GetDetailAsync(object id, params Expression<Func<T, object>>[] includes) : Task<T?>
}

class DPIAResponsibilityRepository {
    +FindAsync(Expression<Func<T, bool>> predicate) : Task<IEnumerable<T>>
}

class DPIAMemberRepository {
    +FindAsync(Expression<Func<T, bool>> predicate) : Task<IEnumerable<T>>
    +BulkAddAsync(IEnumerable<T> entities) : Task
}

DPIAController --> DPIAService
DPIAController --> DPIAResponsibilityMemberUpdateVM : "receives from client"
DPIAService --> DPIARepository : "get DPIA instance"
DPIAService --> DPIAResponsibilityRepository : "get responsibilities"
DPIAService --> DPIAMemberRepository : "add/remove DPIA members"

@enduml