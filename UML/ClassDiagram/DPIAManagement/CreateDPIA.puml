' ' @startuml

' ' class DPIAController {
' '     -_dpiaService : IDPIAService

' '     +AddDPIA([FromForm] DPIACreateVM model) : Task<ActionResult>
' ' }

' ' class DPIACreateVM {
' '     +Title : string
' '     +ExternalSystemId : Guid
' '     +Description : string?
' '     +DueDate : DateTime?
' '     +Type : DPIAType
' '     +Documents : List<IFormFile>?
' '     +Responsibilities : List<DPIAResponsibilityCreateVM>
' ' }

' ' class DPIAResponsibilityCreateVM {
' '     +DueDate : DateTime?
' '     +ResponsibilityId : Guid
' '     +UserIds : List<Guid>
' '     +Pic : Guid?
' ' }

' ' enum DPIAType {
' '     NewOrUpdatedSystem
' '     PeriodicReview
' '     DataBreach
' ' }

' ' class DPIAService {
' '     -_systemService : IExternalSystemService
' '     -_messageBuilder : IEventMessageBuilder

' '     +(DPIACreateVM entity, ClaimsPrincipal principal) : Task<DPIA>
' ' }

' ' class DPIAEventMessageBuilder {
' '     +BuildDPIACreatedEvent(string username) : string
' ' }

' ' class ExternalSystemService {
' ' }

' ' class ClaimsPrincipal {
' '     +Identities : IEnumerable<ClaimsIdentity>
' '     ...
' ' }

' ' class BaseService<T> {
' '     +GetByIdAsync(object id) : Task<T?>
' ' }

' ' class UserRepository {
' '     +CheckUserInGroup(Guid userId, string groupName) : Task<Result<bool>>
' ' }

' ' class DPIARepository {
' ' }

' ' class BaseRepository<T> {
' '     +AddAsync(T entity) : Task<T>
' ' }

' ' DPIAController --> DPIACreateVM : "receives from client"
' ' DPIACreateVM --> DPIAResponsibilityCreateVM : "one DPIA may have many responsibilities"
' ' DPIAController --> DPIAService : "1. creates DPIA"
' ' DPIAService --> UserRepository : "3. check whether logged in user is DPO"
' ' DPIAService -U-> ClaimsPrincipal : "2. extract userId from principal"
' ' DPIAService --|> BaseService : "inherits default implementations"
' ' ExternalSystemService --|> BaseService
' ' DPIAService --> ExternalSystemService : "4. gets system instance to check system's status"
' ' DPIAService --> DPIAEventMessageBuilder : "6. builds notification message"
' ' DPIAService --> DPIARepository : "5. save DPIA instance to database"
' ' DPIARepository --|> BaseRepository
' ' UserRepository --|> BaseRepository

' ' @enduml

' @startuml
' top to bottom direction
' skinparam classAttributeIconSize 0
' skinparam defaultTextAlignment center

' ' === DEPENDENCIES ===
' interface IDPIARepository {
'     +AddAsync(DPIA) : Task
' }

' interface IFileRepository {
'     +UploadFileAsync(Stream, string, string) : Task<string>
' }

' interface IMemberResponsibilityRepository {
'     +BulkAddAsync(List<MemberResponsibility>) : Task
' }

' interface IDPIAMemberRepository {
'     +GetDpiaMemberEmail(Guid) : Task<List<string>>
' }

' interface IExternalSystemService {
'     +GetByIdAsync(Guid) : Task<ExternalSystem>
' }

' interface IEventMessageBuilder {
'     +BuildDPIACreatedEvent(string) : string
' }

' interface IMapper {
'     +Map<T>(object source) : T
' }

' interface IMediator {
'     +Publish(notification) : Task
' }

' ' === CONNECTIONS ===
' DPIAService --> IDPIARepository : "uses for\nAddAsync(DPIA)"
' DPIAService --> IFileRepository : "uploads files"
' DPIAService --> IMemberResponsibilityRepository : "bulk add responsibilities"
' DPIAService --> IDPIAMemberRepository : "create DPIA members"
' DPIAService --> IExternalSystemService : "validate system\nGetByIdAsync"
' DPIAService --> IEventMessageBuilder : "builds DPIA event message"
' DPIAService --> IMapper : "maps VM to entity"
' DPIAService --> IMediator : "publishes\nnotifications"
' class DPIAController {
'     -_dpiaService : DPIAService
'     +AddDPIA([FromForm] DPIACreateVM model) : Task<ActionResult>
' }

' ' === VIEWMODELS ===
' class DPIACreateVM {
'     +Title : string
'     +ExternalSystemId : Guid
'     +Description : string?
'     +DueDate : DateTime?
'     +Type : DPIAType
'     +Documents : List<IFormFile>?
'     +Responsibilities : List<DPIAResponsibilityCreateVM>
' }

' class DPIAResponsibilityCreateVM {
'     +DueDate : DateTime?
'     +ResponsibilityId : Guid
'     +UserIds : List<Guid>
'     +Pic : Guid?
' }

' enum DPIAType {
'     NewOrUpdatedSystem
'     PeriodicReview
'     DataBreach
' }

' ' === SERVICE ===
' class DPIAService {
'     -_systemService : ExternalSystemService
'     -_messageBuilder : DPIAEventMessageBuilder
'     -_dpiaRepository : DPIARepository
'     -_userRepository : UserRepository

'     +AddAsync(DPIACreateVM entity, ClaimsPrincipal principal) : Task<DPIA>
' }

' ' === SYSTEM ===
' class ClaimsPrincipal {
'     +Identities : IEnumerable<ClaimsIdentity>
'     ...
' }

' ' === HELPERS ===
' class DPIAEventMessageBuilder {
'     +BuildDPIACreatedEvent(string username) : string
' }

' ' === BASE STRUCTURES ===
' class BaseService<T> {
'     +GetByIdAsync(object id) : Task<T?>
' }

' class BaseRepository<T> {
'     +AddAsync(T entity) : Task<T>
' }

' ' === REPOSITORIES ===
' class ExternalSystemService {
' }
' class DPIARepository {
' }
' class UserRepository {
'     +CheckUserInGroup(Guid userId, string groupName) : Task<Result<bool>>
' }

' ' === INHERITANCE & CONNECTIONS ===
' DPIAController --> DPIACreateVM : "receives from client"
' DPIACreateVM --> DPIAResponsibilityCreateVM : "has many"
' DPIAController --> DPIAService : "1. creates DPIA"

' DPIAService --> ClaimsPrincipal : "2. extract userId"
' DPIAService --> UserRepository : "3. check DPO group"
' DPIAService --> ExternalSystemService : "4. validate system status"
' DPIAService --> DPIARepository : "5. save DPIA"
' DPIAService --> DPIAEventMessageBuilder : "6. build event message"

' DPIAService --|> BaseService
' DPIARepository --|> BaseRepository
' UserRepository --|> BaseRepository
' ExternalSystemService --|> BaseService

' @enduml

@startuml
top to bottom direction
skinparam classAttributeIconSize 0
skinparam defaultTextAlignment center

' === CONTROLLER ===
class DPIAController {
    -_dpiaService : DPIAService
    +AddDPIA([FromForm] DPIACreateVM model) : Task<ActionResult>
}

' === SERVICE ===
class DPIAService {
    -_systemService : ExternalSystemService
    -_messageBuilder : DPIAEventMessageBuilder
    -_dpiaRepository : DPIARepository
    -_userRepository : UserRepository

    +AddAsync(DPIACreateVM entity, ClaimsPrincipal principal) : Task<DPIA>
}

DPIAController --> DPIACreateVM : "receives from client"
DPIACreateVM --> DPIAResponsibilityCreateVM : "has many"
DPIAController --> DPIAService : "calls AddAsync"

DPIAService --> ClaimsPrincipal : "extracts userId"
DPIAService --> UserRepository : "check DPO group"
DPIAService --> ExternalSystemService : "validate system status"
DPIAService --> DPIARepository : "save DPIA"
DPIAService --> DPIAEventMessageBuilder : "build event message"
DPIAService --> FileRepository : "upload files"
DPIAService --> MemberResponsibilityRepository : "bulk add responsibilities"
DPIAService --> DPIAMemberRepository : "manage DPIA members"
DPIAService --> IEventMessageBuilder : "builds messages"
DPIAService --> IMapper : "maps VM to entity"
DPIAService --> IMediator : "publishes events"

' === VIEWMODELS ===
class DPIACreateVM {
    +Title : string
    +ExternalSystemId : Guid
    +Description : string?
    +DueDate : DateTime?
    +Type : DPIAType
    +Documents : List<IFormFile>?
    +Responsibilities : List<DPIAResponsibilityCreateVM>
}

class DPIAResponsibilityCreateVM {
    +DueDate : DateTime?
    +ResponsibilityId : Guid
    +UserIds : List<Guid>
    +Pic : Guid?
}

enum DPIAType {
    NewOrUpdatedSystem
    PeriodicReview
    DataBreach
}

' === SYSTEM ===
class ClaimsPrincipal {
    +Identities : IEnumerable<ClaimsIdentity>
    ...
}

' === HELPERS ===
class DPIAEventMessageBuilder {
    +BuildDPIACreatedEvent(string username) : string
}

' === REPOSITORIES ===
class DPIARepository {
    +AddAsync(DPIA) : Task
}
class FileRepository {
    +UploadFileAsync(Stream, string, string) : Task<string>
}
class MemberResponsibilityRepository {
    +BulkAddAsync(List<MemberResponsibility>) : Task
}
class DPIAMemberRepository {
    +GetDpiaMemberEmail(Guid) : Task<List<string>>
}
class UserRepository {
    +CheckUserInGroup(Guid userId, string groupName) : Task<Result<bool>>
}
class ExternalSystemService {
    +GetByIdAsync(Guid) : Task<ExternalSystem>
}

' === BASE CLASSES ===
class BaseService<T> {
    +GetByIdAsync(object id) : Task<T?>
}
class BaseRepository<T> {
    +AddAsync(T entity) : Task<T>
}

' === INHERITANCE ===
DPIAService --|> BaseService
DPIARepository --|> BaseRepository
UserRepository --|> BaseRepository
ExternalSystemService --|> BaseService

@enduml
