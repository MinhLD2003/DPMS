@startuml
skinparam classAttributeIconSize 0
skinparam defaultTextAlignment center

' Entity
' class User {
'   +string Email
'   +string Password
'   +string Salt
'   +DateTime LastModifiedAt
' }

' DTOs
class ForgotPasswordRequest {
  +string Email
}

class ResetPasswordModel {
  +string Token
  +string NewPassword
}

' Interfaces
interface IEmailService {
  +Task<bool> SendResetPasswordEmailAsync(string email, string token)
}

' interface IUserService {
'   +Task<User?> GetUserByEmailAsync(string email)
'   +Task<User?> UpdateUserPassword(string password, string salt, string email)
' }

' Controller
class ForgotPasswordController {
  -IEmailService _emailService
  -AuthService _authService
  -IUserService _userService
  +Task<ActionResult<bool>> ForgotPassword(ForgotPasswordRequest req)
  +Task<IActionResult> SetNewPassword(ResetPasswordModel model)
  +IActionResult VerifyResetToken(string token)
}

ForgotPasswordController --> IEmailService : sending email
ForgotPasswordController --> AuthService : generate reset\n password token
ForgotPasswordController --> UserService
ForgotPasswordController --> ForgotPasswordRequest
ForgotPasswordController --> ResetPasswordModel

' Services
class AuthService {
  +string GenerateJwtToken(User user)
  +ClaimsPrincipal GetPrincipalFromToken(string token)
}

' Util
class PasswordUtils {
  +byte[] GenerateSalt()
  +string HashPassword(string password, string salt)
}

ForgotPasswordController --> PasswordUtils : static usage

' Repository
class UserService {
  +Task<User?> GetUserByEmailAsync(string email)
  +Task<User?> UpdateUserPassword(string password, string salt, string email)
}

@enduml