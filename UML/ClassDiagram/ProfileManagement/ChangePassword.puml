@startuml

' === DTO ===
class ChangePasswordVM {
  +OldPassword : string 
  +NewPassword : string 
}

' === Entity ===

' === Service Interface ===
interface IUserService {
  +GetUserByEmailAsync(string email) : Task<User?> 
  +ChangePassword(string email, ChangePasswordVM model) : Task
  +UpdateAsync(User user) : Task 
}

' === Implementation ===
class UserService {
  +GetUserByEmailAsync(string) : Task<User?>
  +ChangePassword(string, ChangePasswordVM) : Task
  +UpdateAsync(User) : Task
}

UserService ..|> IUserService

' === Password Utility ===
class PasswordUtils {
  +{static} HashPassword(string password, string salt) : string
}

abstract class BaseService<T> {
  #Repository : IRepository<T>

  +UpdateAsync<T>(T entity) : Task<T>
}

interface IService<T> {
  +UpdateAsync<T>(T entity) : Task<T>
}

interface IRepository<T> {
  +Update(T entity) : void
}

abstract class BaseRepository<T> {
  #_context : DPMSContext
  #_dbSet : DbSet<T>

  +Update(T entity) : void
}

interface IUserRepository {
  +GetUserByEmailAsync(string email) : Task<User?> 
}

class UserRepository {
  +GetUserByEmailAsync(string email) : Task<User?> 
}

UserRepository ..|> IUserRepository
BaseRepository .U.|> IRepository
UserService --|> BaseService
BaseService ..|> IService
BaseService --> IRepository : uses repository \nto update database
UserService --> PasswordUtils : "hashes password"

' === Controller ===
class UserController {
  -IUserService _userService
  -ILogger<UserController> _logger
  +Task<ActionResult> ChangePassword(ChangePasswordVM model)
}

UserController --> IUserService : "calls service to\n change password"
UserController --> ChangePasswordVM : receives from client
UserController --> ILogger : logs change password attempts

@enduml