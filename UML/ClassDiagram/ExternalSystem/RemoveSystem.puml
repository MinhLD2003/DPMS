@startuml

' Entity

' Service Layer
abstract class BaseRepository<T> {
    #_context : DPMSContext
    #_dbSet : DbSet<T>

    +GetByIdAsync<T>(object id) : Task<T?>
    +FindAsync(Expression<Func<T, bool>> predicate) : Task<IEnumerable<T>>
    +BulkDeleteAsync(IEnumerable<T> entities) : Task
}

abstract class BaseService<T> {
    #Repository : IRepository<T>
    #_unitOfWork : IUnitOfWork
}

class UnitOfWork {
    +SaveChangesAsync() : Task<int>
}

class ExternalSystemRepository {
}

class ExternalSystemPurposeRepository {
}

class GroupRepository {
}

class ExternalSystemService {
    -_mapper : IMapper
    -_externalSystemRepository : IExternalSystemRepository

    +RemoveExternalSystem(Guid systemId) : Task
}

' Controller
class ExternalSystemController {
    +RemoveSystem(Guid systemId) : Task<ActionResult>

    -_systemService: IExternalSystemService
}

' Relationships (with comments on arrows)

ExternalSystemRepository --|> BaseRepository
GroupRepository --|> BaseRepository : "inherits default implementations"
ExternalSystemPurposeRepository --|> BaseRepository

ExternalSystemService --> ExternalSystemRepository : "Get system by id and remove it"
ExternalSystemService --> GroupRepository : "delete associate groups"
ExternalSystemService --> ExternalSystemPurposeRepository : "delete associate purposes"

BaseService --> UnitOfWork : Save changes to database
ExternalSystemService --|> BaseService : "inherits default implementations"
ExternalSystemService <-U- ExternalSystemController : "Removes system"
' UnitOfWork --> ExternalSystemRepository : "Uses repository to remove system"

@enduml