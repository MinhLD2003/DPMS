@startuml

abstract class BaseService<T> {
    #Repository : IRepository<T>
    #_unitOfWork : IUnitOfWork
}

abstract class BaseRepository<T> {
    #_context : DPMSContext
    #_dbSet : DbSet<T>
}

interface IRepository<T> {
    +Task<T?> GetByIdAsync(object id)
    +Task DeleteAsync(object id)
}

BaseRepository --|> IRepository

BaseService --|> IService
BaseService --> IRepository : uses IRepository<T>

class PrivacyPolicyController {
    -_privacyPolicyService : IPrivacyPolicyService

    +Task<IActionResult> DeletePolicy(Guid id)
}

class PrivacyPolicyService {
}

interface IPrivacyPolicyService {
}

interface IService<T> {
    +Task<T?> GetByIdAsync(object id)
    +Task<bool> DeleteAsync(object id)
}

IPrivacyPolicyService --|> IService
PrivacyPolicyService --|> IPrivacyPolicyService
PrivacyPolicyService --|> BaseService : inherits default \nimplementations from
PrivacyPolicyController --> IPrivacyPolicyService : check if policy exists then delete

@enduml