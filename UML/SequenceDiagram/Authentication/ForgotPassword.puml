@startuml
actor User
boundary "Forgot Password Screen" as ForgotScreen
boundary "Reset Password Screen" as ResetScreen
participant "ForgotPasswordController" as Controller
participant "AuthService" as Auth
participant "UserService" as Service
participant "PasswordUtils" as Util
participant "EmailService" as Mail
database "Database" as DB

== Forgot Password Request ==
User -> ForgotScreen : Input email
activate ForgotScreen
ForgotScreen -> Controller : ForgotPassword(req: ForgotPasswordRequest)
deactivate ForgotScreen
activate Controller

Controller -> Service : GetUserByEmailAsync(email)
activate Service
Service -> DB : Invoke SELECT query
activate DB
DB --> Service : User or null
deactivate DB
Service --> Controller : User or null
deactivate Service

alt User exists
    Controller -> Auth : Generate reset token (JWT)
    activate Auth
    Auth --> Controller : Reset token
    deactivate Auth

    Controller -> Mail : SendResetPasswordEmailAsync(email, token)
    activate Mail
    Mail --> Controller : success/fail
    deactivate Mail

    Controller --> ForgotScreen : Return OK (email sent)
else User not found
    Controller --> ForgotScreen : Return OK (avoid email leak)
end
deactivate Controller

== Reset Password ==
User -> ResetScreen : Enter token + new password
activate ResetScreen
ResetScreen -> Controller : SetNewPassword(model: ResetPasswordModel)
deactivate ResetScreen
activate Controller

Controller -> Auth : GetPrincipalFromToken(token)
activate Auth
Auth --> Controller : ClaimsPrincipal or null
deactivate Auth

alt Token valid
    Controller -> Service : GetUserByEmailAsync(email from token)
    activate Service
    Service -> DB : Invoke SELECT query
    activate DB
    DB --> Service : User
    deactivate DB
    Service --> Controller : User
    deactivate Service

    Controller -> Util : GenerateSalt()
    activate Util
    Util --> Controller : salt
    Controller -> Util : HashPassword(newPwd, salt)
    Util --> Controller : hashedPassword
    deactivate Util

    Controller -> Service : UpdateUserPassword(hashedPwd, salt, email)
    activate Service
    Service -> DB : Invoke UPDATE query
    DB --> Service : OK
    Service --> Controller : OK
    deactivate Service

    Controller --> ResetScreen : Password updated
else Token invalid
    Controller --> ResetScreen : Show error "Invalid or expired link"
end
deactivate Controller
@enduml
