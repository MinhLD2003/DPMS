@startuml
skinparam classAttributeIconSize 0
skinparam defaultTextAlignment center

actor User
boundary "DPIA Responsibility Detail Screen" as Screen
participant "DPIAController" as Controller
participant "DPIAService" as Service
participant "DPIARepository" as DPIARepo
participant "DPIAResponsibilityRepository" as RespRepo
participant "CommentRepository" as CommentRepo
database "Database" as DB

User -> Screen : Click View Responsibility
activate Screen
Screen -> Controller : GetResponsibility(dpiaId, responsibilityId)
deactivate Screen
activate Controller

Controller -> Service : GetResponsibilityAsync(dpiaId, responsibilityId)
activate Service

Service -> RespRepo : FindAsync(r => r.DPIAId == dpiaId && r.ResponsibilityId == rid)
activate RespRepo
RespRepo -> DB : SELECT FROM DPIAResponsibilities 
DB --> RespRepo : DPIAResponsibility
RespRepo --> Service : Responsibility entity
deactivate RespRepo

Service -> RespRepo : GetDetailAsync(responsibility.Id, includes: DPIA, Responsibility)
activate RespRepo
RespRepo -> DB : SELECT FROM  JOIN DPIA, Responsibility
DB --> RespRepo : Responsibility with included data
RespRepo --> Service : DPIAResponsibility
deactivate RespRepo

Service -> CommentRepo : FindAsync(c => c.ReferenceId == responsibility.Id)
activate CommentRepo
CommentRepo -> DB : SELECT FROM Comments
DB --> CommentRepo : List<Comment>
CommentRepo --> Service : Comments
deactivate CommentRepo

Service -> RespRepo : GetMembersAsync(responsibility.Id)
activate RespRepo
RespRepo -> DB : SELECT FROM MemberResponsibilities 
DB --> RespRepo : MemberResponsibilities
RespRepo --> Service : List<MemberResponsibility>
deactivate RespRepo

Service -> DPIARepo : GetDetailAsync(dpiaId, includes: Documents)
activate DPIARepo
DPIARepo -> DB : SELECT FROM DPIA JOIN Documents 
DB --> DPIARepo : DPIA with documents
DPIARepo --> Service : DPIA
deactivate DPIARepo

Service --> Controller : DPIAResponsibilityDetailVM
deactivate Service

Controller --> Screen : Return ViewModel
deactivate Controller
@enduml
