@startuml
actor User
boundary "Change Password Screen" as Screen
participant "UserController" as Controller
participant "UserService" as Service
participant "PasswordUtils" as Util
database "Database" as DB

User -> Screen : Enter old & new password
activate Screen
Screen -> Controller : ChangePassword(ChangePasswordVM)
deactivate Screen
activate Controller

Controller -> Service : GetUserByEmailAsync(currentUser.Email)
activate Service
Service -> DB : SELECT FROM Users 
activate DB
DB --> Service : Return User
deactivate DB
Service --> Controller : Return User
deactivate Service

Controller -> Util : HashPassword(model.OldPassword, user.Salt)
activate Util
Util --> Controller : hashed input
deactivate Util

Controller -> User : Compare stored password
alt Match
    Controller -> Util : HashPassword(model.NewPassword, user.Salt)
    activate Util
    Util --> Controller : hashed new password
    deactivate Util

    Controller -> Service : UpdateAsync(user)
    activate Service
    Service -> DB : UPDATE Users 
    DB --> Service : OK
    Service --> Controller : OK
    deactivate Service

    Controller --> Screen : Return "Password changed"
else Mismatch
    Controller --> Screen : Return error "Old password incorrect"
end
deactivate Controller
@enduml
