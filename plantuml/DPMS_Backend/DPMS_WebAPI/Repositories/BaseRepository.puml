@startuml
abstract class "BaseRepository`1"<T> {
    + <<virtual>> <<async>> GetPagedAsync(queryParams:QueryParams, includes:Expression<Func<T, object>>[]?) : Task<PagedResponse<T>>
    + <<virtual>> <<async>> GetAllAsync() : Task<IEnumerable<T>>
    + <<virtual>> <<async>> FindAsync(predicate:Expression<Func<T, bool>>) : Task<IEnumerable<T>>
    + <<virtual>> <<async>> GetByIdAsync(id:object) : Task<T?>
    + <<virtual>> <<async>> AddAsync(entity:T) : Task<T>
    + <<virtual>> Update(entity:T) : void
    + <<virtual>> <<async>> DeleteAsync(id:object) : Task
    + <<virtual>> Delete(entity:T) : void
    + <<async>> BulkAddAsync(entities:IEnumerable<T>) : Task
    + <<async>> BulkDeleteAsync(entities:IEnumerable<T>) : Task
    + <<virtual>> <<async>> GetDetailAsync(id:object, includes:Expression<Func<T, object>>[]) : Task<T?>
}
class "IRepository`1"<T> {
}
"IRepository`1" "<T>" <|-- "BaseRepository`1"
@enduml
